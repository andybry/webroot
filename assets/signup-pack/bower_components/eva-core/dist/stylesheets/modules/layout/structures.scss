@mixin generate-layout-structures(
  $alignments: left center right
) {

  // ############################################################################
  // # VERTICAL CENTERING
  // ############################################################################
  //
  // center child elements vertically
  %st-layout__center_vertically {
    &:before {
      content: '';
      display: inline-block;
      height: 100%;
      vertical-align: middle;
    }
    > * {
      display: inline-block;
      vertical-align: middle;
    }
  }

  // ############################################################################
  // # CLEARFIX
  // ############################################################################
  //
  %st-layout__clearfix:after {
       visibility: hidden;
       display: block;
       font-size: 0;
       content: " ";
       clear: both;
       height: 0;
       }
  %st-layout__clearfix { display: inline-block; }
  /* start commented backslash hack \*/
  * html %clearfix { height: 1%; }
  %st-layout__clearfix { display: block; }
  /* close commented backslash hack */

  // ############################################################################
  // # BLOCK LAYOUTS
  // ############################################################################
  //
  // Layouts using block elements - traditional floated layout blocks (for when
  //                                vertical alignment is not of the essence)
  // Types:
  //       %st-layout__block-parent: elements must be contained in an element using these
  //                          style rules
  //       %st-layout__block-of-width--{percent-value}:
  //                          these elements represent a percentage width of the
  //                          parent element
  //       %st-layout__child-of-width--{horizontal-alignment}--{percent-value}
  //                          same as above, but with horizontal alignment
  //                          (i.e. left, center, right)

  // parent container of blocks
  // (can be given a pixel width to make a fixed grid)
  %st-layout__parent-block {
    @extend %st-layout__clearfix;
  }

  // base for the child block layout
  %st-layout__block {
    display: block;
    float: left;
    box-sizing: border-box;
    -moz-box-sizing: border-box;
  }

  %st-layout__box-sizing {
    -moz-box-sizing: border-box;
    box-sizing: border-box;
  }

  %st-table-cell-wrapper {
    position: relative;
  }

  // percentage layouts in multiples of 5
  //
  // these generate containers for content
  //
  // examples:
  //   %st-layout__block-of-width--50 (a 50% container)
  //   %st-layout__block-of-width--center--25 (a 25% container with centered content)
  @for $multiple from 1 through 20 {
    $width: (5% * $multiple);
    $variant_name: (5 * $multiple);
    // generate %st-layout__block-of-width--n elements (n a percentage width)
    @include generate-block-of-width(
      $variant_name: $variant_name,
      $width: $width
    );
    @each $alignment in $alignments {
      // generate %st-layout__block-of-width--left--n elements (n a percentage width) (etc.)
      @include generate-block-of-width-aligned(
        $alignment: $alignment,
        $variant_name: $variant_name,
        $width: $width
      );
    }
  }

  // percentage layouts in thirds
  @include generate-block-of-width(
    $variant_name: one-third,
    $width: (100% / 3)
  );
  @each $alignment in $alignments {
    // generate %st-layout__block-of-width--left--one-third (etc.)
    @include generate-block-of-width-aligned(
      $alignment: $alignment,
      $variant_name: one-third,
      $width: (100% / 3)
    );
  }
 // percentage layout two thirds
 @include generate-block-of-width(
    $variant_name: two-thirds,
    $width: (200% / 3)
  );
  @each $alignment in $alignments {
    // generate %st-layout__block-of-width--left--two-thirds elements
    @include generate-block-of-width-aligned(
      $alignment: $alignment,
      $variant_name: two-thirds,
      $width: (200% / 3)
    );
  }


  // ############################################################################
  // # HORIZONTAL LIST WITH DIVIDERS
  // ############################################################################
  //
  %st-layout__horizontal-list-item {
    display: inline-block;
    padding-right: 2%;
    margin-right: 2%;
    &:last-child {
      padding-right: 0;
      margin-right: 0;
    }
  }
}

{
  "name": "eva-grid-frameless",
  "description": "Frameless Grid module",
  "version": "0.0.0",
  "gitHead": "939853e7338e1d8958e0325af5a658a0127d34ce",
  "readme": "# Frameless Grid module\n\n##The HTML\nConsider two HTML elements:\n\n    <body>\n      <div class=\"container\">\n        <div class=\"main\">Main</div>\n        <div class=\"sidebar\">Sidebar</div>\n      </div>\n    </body>\n\nAll the columns must be contained in the `.container` element, as this element\nset the width of the document and bootstrap the grid.\n\n##The stylesheet\nTo position these elements side by side side, provide the desired number of grid units to the `column()` mixin:\n\n    @import 'grid';\n\n    $column: 55px;\n    $gutter: 15px;\n\n    .main {\n       @include column(9);\n    }\n    .sidebar {\n       @include column(3);\n    }\n\nThe `column()` mixin expands to:\n\n    @mixin column( $cols ) {\n      margin-left: ceil($gutter / 2);\n      margin-right: floor($gutter / 2);\n      float: left;\n      display: inline;\n      width: column_size( $cols );\n    }\n\nyou can use the `column()` function to get only the width for a particular\ncolumn. Eg:\n\n    .my-column {\n      width: column(3);\n      /* there is no float, or margin declared on this element */\n    }\n\n## More complex layouts.\nLet's assume you want to code the following layout:\n\n    +-------------------------------------------+\n    |+-----------++------------+        +------+|\n    ||           ||            |        |      ||\n    ||           ||            |        |      ||\n    ||           ||            |        |      ||\n    ||           ||            |        |      ||\n    ||           ||            |        |      ||\n    ||           ||            |        |      ||\n    |+-----------++------------+        +------+|\n    +-------------------------------------------+\n\nwhere the first 2 blocks are 4 columns wide and the space and the last column\nare just 2 columns wide. The HTML would be:\n\n    <body>\n      <div class=\"container\">\n        <div class=\"col4\">4 columns wide</div>\n        <div class=\"col4\">4 columns wide</div>\n        <div class=\"col2\">2 columns wide</div>\n      </div>\n    </body>\n\nAnd the CSS:\n\n    @import 'grid';\n\n    $column: 55px;\n    $gutter: 15px;\n\n    .col4 {\n       @include column(4);\n    }\n    .col2 {\n       @include column(2);\n       @include offset-by(2);\n    }\n\nwhere `@include offset-by( n )` pushes the last block off 2 columns from the\n4 columns blocks. You can use that mixin to space your layout.\n\n### Going responsive\nThis grid can easily adapt the number of columns when the viewport changes using\nbreakpoints. Those, can be define using the `$breakpoints` variable:\n\n    $breakpoints : 4, 9, 12, 18;\n    $column: 55px;\n    $gutter: 15px;\n\nThe grid automatically creates the following media queries:\n\n     4 columns ->  280px        given by  4 * (55px + 15px)\n     9 columns ->  630px        given by  9 * (55px + 15px)\n    12 columns ->  840px        given by 12 * (55px + 15px)\n    18 columns -> 1260px        given by 18 * (55px + 15px)\n\nThe size of the `.container` is adjusted accordingly to the current media query.\nFor every other element you want to adapt, you have to write your own media\nquery. Fortunately, we have an helper for that. But before we dig into it, let's\nstart with a small example: we want to code the following website that scales\nwith 3 breakpoints 4, 9 and 12:\n\n\n    12 columns\n    Main    -> 6 columns\n    Sidebar -> 4 columns\n    Nav     -> 2 columns\n    +------------------------------------------------------------+\n    |+------------------------------++----------------++--------+|\n    ||                              ||                ||        ||\n    ||                              ||                ||        ||\n    ||                              ||                ||        ||\n    ||                              ||                ||        ||\n    ||                              ||                ||        ||\n    ||             Main             ||    Sidebar     ||  Nav   ||\n    ||                              ||                ||        ||\n    ||                              ||                ||        ||\n    ||                              ||                ||        ||\n    ||                              ||                ||        ||\n    ||                              ||                ||        ||\n    ||                              ||                ||        ||\n    ||                              ||                ||        ||\n    |+------------------------------++----------------++--------+|\n    +------------------------------------------------------------+\n\n    9 columns\n    Main    -> 6 columns\n    Sidebar -> 3 columns\n    Nav     -> 9 columns\n    +--------------------------------------------------+\n    |+------------------------------++----------------+|\n    ||                              ||                ||\n    ||                              ||                ||\n    ||                              ||                ||\n    ||                              ||                ||\n    ||                              ||                ||\n    ||             Main             ||    Sidebar     ||\n    ||                              ||                ||\n    ||                              ||                ||\n    ||                              ||                ||\n    ||                              ||                ||\n    ||                              ||                ||\n    ||                              ||                ||\n    ||                              ||                ||\n    |+------------------------------++----------------+|\n    |+------------------------------------------------+|\n    ||                                                ||\n    ||                       Nav                      ||\n    ||                                                ||\n    |+------------------------------------------------+|\n    +--------------------------------------------------+\n\n    4 columns\n    Main    -> 4 columns\n    Sidebar -> 4 columns\n    Nav     -> 4 columns\n    +--------------------------------+\n    |+------------------------------+|\n    ||                              ||\n    ||                              ||\n    ||                              ||\n    ||                              ||\n    ||                              ||\n    ||             Main             ||\n    ||                              ||\n    ||                              ||\n    ||                              ||\n    ||                              ||\n    ||                              ||\n    ||                              ||\n    ||                              ||\n    |+------------------------------+|\n    |+------------------------------+|\n    ||                              ||\n    ||            Sidebar           ||\n    ||                              ||\n    |+------------------------------+|\n    |+------------------------------+|\n    ||                              ||\n    ||              Nav             ||\n    ||                              ||\n    |+------------------------------+|\n    +--------------------------------+\n\nThe HTML would be:\n\n    <body>\n      <div class=\"container\">\n        <div class=\"main\">Main</div>\n        <div class=\"sidebar\">Sidebar</div>\n        <div class=\"nav\">Nav</div>\n      </div>\n    </body>\n\nIn the CSS, we can start by declaring the gutter, the width and the breakpoints:\n\n    @import 'grid';\n\n    $column: 55px;\n    $gutter: 15px;\n    $breakpoints: 4, 9, 12;\n\nThen we can code the first 12 columns layout:\n\n    .main {\n       @include column(6);\n    }\n    .sidebar {\n       @include column(4);\n    }\n    .nav {\n       @include column(2);\n    }\n\nWhen the viewport is only 9 columns wide, we can reshuffle the layout. We can\ntrigger the reshuffle with a media query:\n\n    @media only screen and (min-width: container(9) ) and ( max-width: container(12) ) {\n      // Only 9 columns available\n      .sidebar {\n        @include column(3);\n      }\n\n      .nav {\n        @include column(9);\n      }\n\n    }\n\nPlease note that there is no need to specify the two extremes of the media\nquery. The `container` function compute the right values for us. Lastly, we can\nright the CSS when the view port is only 4 columns wide:\n\n\n    @media only screen and ( max-width: container(9) ) {\n      // Only 4 columns available\n      .main,\n      .sidebar,\n      .nav {\n        @include column(4);\n      }\n\n    }\n\nCongratulations, you've just completed your first website with the frameless\ngrid.\n\n### Nesting\nA nested div that's touching the left edge of its parent `<div>` would use the `column-alpha` mixin. Similarly, the `column-omega` mixin is assigned to the nested div that's placed on the parent div's right edge. But what if we have a nested div that touches both edges of its parent div? That's right, we include the mixin `column-alpha-omega` to it.\n\n### Clearfix\nThis grid uses the `.group` clearfix ([more info about this](http://css-tricks.com/snippets/css/clear-fix/)).\nAlso, the same clearifx is available as a mixin.\n\n# Changelog\n- 0.2.0 Alpha and omega mixins for nested columns.\n- 0.1.0 *BREAKING CHANGES* Rewritten in SASS. Automatic generation of breakpoints, mixins for\n  columns, offsets, clearfix and container size. Improved documentation.\n- 0.0.1 First release\n",
  "readmeFilename": "README.md",
  "_id": "eva-grid-frameless@0.2.0",
  "commit": "939853e7338e1d8958e0325af5a658a0127d34ce",
  "repository": {
    "type": "git",
    "url": "git@github.com:whichdigital/eva-grid-frameless.git"
  }
}
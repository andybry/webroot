////////////////
// Semantic.gs // for LESS: http://lesscss.org/
/////////////////

// Defaults which you can freely override
@scale: 1;
@column-width: 55;
@gutter-width: 15;
@columns: 18;

// Utility variable â€” you should never need to modify this
@gridsystem-width: (@column-width*@columns) + (@gutter-width*@columns) * 1px;

// Set @total-width to 100% for a fluid layout
@total-width: @gridsystem-width;

// Uncomment these two lines and the star-hack width/margin lines below to enable sub-pixel fix for IE6 & 7. See http://tylertate.com/blog/2012/01/05/subpixel-rounding.html
// @min-width: 960;
// @correction: 0.5 / @min-width * 100 * 1%;

//////////
// GRID //
//////////

.row(@columns:@columns) {
	display: block;
	width: @total-width*((@gutter-width + @gridsystem-width)/@gridsystem-width);
	margin: 0 @total-width*(((@gutter-width*.5)/@gridsystem-width)*-1);
	// *width: @total-width*((@gutter-width + @gridsystem-width)/@gridsystem-width)-@correction;
	// *margin: 0 @total-width*(((@gutter-width*.5)/@gridsystem-width)*-1)-@correction;
	.clearfix;
}

// for media query 
.masterSize(@x,@columns:@columns) {
	width: @total-width*(((@gutter-width+@column-width)*@x) / @gridsystem-width);
}

.master(@x,@columns:@columns) {
	display: block;
	width: @total-width*(((@gutter-width+@column-width)*@x) / @gridsystem-width);
	margin-left:auto; margin-right:auto;
}


// For media queries to update only required properties
.columnSize(@x,@columns:@columns) {
	width: @total-width*((((@gutter-width+@column-width)*@x)-@gutter-width) / @gridsystem-width);
	margin: 0 @total-width*((@gutter-width*.5)/@gridsystem-width);
}
.column(@x,@columns:@columns) {
	position:relative;
	display: inline;
	float: left;
	width: @total-width*((((@gutter-width+@column-width)*@x)-@gutter-width) / @gridsystem-width);
	margin: 0 @total-width*((@gutter-width*.5)/@gridsystem-width);

	// IE
	// *width: @total-width*((((@gutter-width+@column-width)*@x)-@gutter-width) / @gridsystem-width)-@correction;
	// *margin: 0 @total-width*((@gutter-width*.5)/@gridsystem-width)-@correction;
}
.columnFull (){
	position:relative;
	display:block;
	margin: 0 @total-width*((@gutter-width*.5)/@gridsystem-width);
}
.push(@offset:1) {
	margin-left: @total-width*(((@gutter-width+@column-width)*@offset) / @gridsystem-width) + @total-width*((@gutter-width*.5)/@gridsystem-width);
}
.pull(@offset:1) {
	margin-right: @total-width*(((@gutter-width+@column-width)*@offset) / @gridsystem-width) + @total-width*((@gutter-width*.5)/@gridsystem-width);
}


//////////
// GRID - background with bleed
//////////
.outer(@x,@columns:@columns) {
	display: block;
	max-width:100%;
	width: @total-width*(((@gutter-width+@column-width)*@x) / @gridsystem-width) + 120;
	margin-left:auto; margin-right:auto;
}

//////////
// VIDEO - preserve ration
//////////
.videoSize(@x,@columns:@columns) {
	width: @total-width*((((@gutter-width+@column-width)*@x)-@gutter-width) / @gridsystem-width);
	//margin: 0 @total-width*((@gutter-width*.5)/@gridsystem-width);
	height: @total-width*((((@gutter-width+@column-width)*@x)-@gutter-width) / @gridsystem-width) * 9/16;
}

//////////
// GRID - background graphic //
//////////

.gridBG(@color, @cols, @offset:-15px){
	@const: (100/70 * 15) * 1%;
	@size: (100/@cols) * 1%;

	background-color: @color;
	background-image: -moz-linear-gradient(0deg, rgba(255,255,255,0.5) 15px, rgba(255, 255, 255, 0.8) 15px, rgba(255, 255, 255, 0.8) 35px, rgba(255, 255, 255, 0.7) 35px, rgba(255, 255, 255, 0.7) 50px, rgba(255, 255, 255, 0.8) 50px);
	background-size: 70px 50px;
	background-position: @offset 0;	
}